from tkinter import *
from PIL import ImageTk, Image
import random
import os
import sys

# Render images
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# Define variables
root = Tk()
root.title("Defuse the bomb!")
bomb = resource_path("bombicon.ico")
root.iconbitmap(bomb)
loop ='y'
turns = 10
guesses =[]
num = 0

cipher1, cipher2, cipher3, cipher4 = 0, 0, 0, 0
cipher1 = str(cipher1)
cipher2 = str(cipher2)
cipher3 = str(cipher3)
cipher4 = str(cipher4)

bomb_img9 = ("bomb9.png")
bomb_img8 = ("bomb8.png")
bomb_img7 = ("bomb7.png")
bomb_img6 = ("bomb6.png")
bomb_img5 = ("bomb5.png")
bomb_img4 = ("bomb4.png")
bomb_img3 = ("bomb3.png")
bomb_img2 = ("bomb2.png")
bomb_img1 = ("bomb1.png")
bomb_img0 = ("bomb0.png")
lose_img = ("lose.png")
win_img = ("win.png")

# Initiatize the 4 digit randomly generated number
rand1 = random.randint(0, 9)

rand2 = random.randint(0, 9)
while rand2 == rand1:
    rand2 = random.randint(0, 9)

rand3 = random.randint(0, 9)
while rand3 == rand2 or rand3 == rand1:
    rand3 = random.randint(0, 9)

rand4 = random.randint(0, 9)
while rand4 == rand3 or rand4 == rand2 or rand4 == rand1:
    rand4 = random.randint(0, 9)

# Concatenate the variables into a single answer
answer = str(rand1) + str(rand2) + str(rand3) + str(rand4)

# Initialize images
bomb9 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img9)))
bomb8 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img8)))
bomb7 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img7)))
bomb6 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img6)))
bomb5 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img5)))
bomb4 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img4)))
bomb3 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img3)))
bomb2 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img2)))
bomb1 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img1)))
bomb0 = ImageTk.PhotoImage(Image.open(resource_path(bomb_img0)))
lose = ImageTk.PhotoImage(Image.open(resource_path(lose_img)))
win = ImageTk.PhotoImage(Image.open(resource_path(win_img)))

bomb_list = [bomb0, bomb1, bomb2, bomb3, bomb4, bomb5, bomb6, bomb7, bomb8, bomb9]



# Selecting number for submission
def button_click(number):
    e.delete(0, END)
    e.insert(0, number)
    global num

    num = int(number)

# Preparing Cipher fields for submission
def field_submit(number,n):
    e.delete(0,END)
    if n == 1:
        n1 = number
        c1.delete(0,END)
        c1.insert(0,n1)
        global cipher1
        cipher1 = str(n1)

    elif n==2:
        n2 = number
        c2.delete(0,END)
        c2.insert(0,n2)
        global cipher2
        cipher2 = str(n2)

    elif n==3:
        n3 = number
        c3.delete(0,END)
        c3.insert(0,n3)
        global cipher3
        cipher3 = str(n3)

    elif n==4:
        n4 = number
        c4.delete(0,END)
        c4.insert(0,n4)
        global cipher4
        cipher4 = str(n4)

    cipher.delete(0,END)
    cipher.insert(0, cipher1+cipher2+cipher3+cipher4)

# Checking the submitted guess against the correct answer + hints
def check_correct(ans):
    global image_label
    global turns
    global submission
    
    current = (10 - turns)
    
    answer = str(ans)
    submit = str(cipher1 + cipher2 + cipher3 + cipher4)
    correct = 0
    exact = 0

    turns -= 1
    
    if answer == submit:

        image_label.grid_forget()
        image_label = Label(image=win, borderwidth=5)
        image_label.grid(row=2, column=3)
        submission.grid_forget()

        try_again = Button(button_frame, text="Press to try again", padx=40, pady=5, command=start_over)
        try_again.grid(row=0, column=0)

        result2.delete('1.0',END)
        result2.insert(END,("Congratulations!\nThe correct combination was " + str(answer)))

        hints.insert(END,submit)

    else:
        
        if cipher1 == answer[0]:
            exact += 1
        if cipher1 == answer[1]:
            correct += 1
        if cipher1 == answer[2]:
            correct += 1
        if cipher1 == answer[3]:
            correct += 1

        if cipher2 == answer[0]:
            correct += 1
        if cipher2 == answer[1]:
            exact += 1
        if cipher2 == answer[2]:
            correct += 1
        if cipher2 == answer[3]:
            correct += 1

        if cipher3 == answer[0]:
            correct += 1
        if cipher3 == answer[1]:
            correct += 1
        if cipher3 == answer[2]:
            exact += 1
        if cipher3 == answer[3]:
            correct += 1

        if cipher4 == answer[0]:
            correct += 1
        if cipher4 == answer[1]:
            correct += 1
        if cipher4 == answer[2]:
            correct += 1
        if cipher4 == answer[3]:
            exact += 1
                      
        guesses.append(f'{submit}-({exact}/{correct})\n')
        
        result2.delete('1.0',END)

        if exact >= 2 & correct >= 2:
            result2.insert(END,(
                (f'{submit}:\n{exact} numbers are in the correct position.\n') + 
                (f'{correct} numbers are correct but in the wrong position.')))

        else:

            if exact == 1:

                if correct == 0:
                    result2.insert(END,((f'{submit}:\n{exact} number is in the correct position.\n')))

                if correct == 1:
                    result2.insert(END,((f'{submit}:\n{exact} number is in the correct position.\n') + 
                 (f'{correct} number is correct but in the wrong position.')))

                if correct > 1:
                    result2.insert(END,((f'{submit}:\n{exact} number is in the correct position.\n') + 
                 (f'{correct} numbers are correct but in the wrong position.')))


            if exact == 0:

                if correct == 0:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are correct.')))

                if correct == 1:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are in the correct position.\n') + 
                 (f'{correct} number is correct but in the wrong position.')))

                if correct > 1:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are in the correct position.\n') + 
                 (f'{correct} numbers are correct but in the wrong position.')))

            if exact > 1:

                if correct == 0:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are in the correct position.\n')))

                if correct == 1:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are in the correct position.\n') + 
                (f'{correct} number is correct but in the wrong position.')))

                if correct > 1:
                    result2.insert(END,((f'{submit}:\n{exact} numbers are in the correct position.\n') + 
                 (f'{correct} numbers are correct but in the wrong position.')))   


        
        hints.insert(END,guesses[current])

        image_label.grid_forget()
        image_label = Label(image=bomb_list[turns-1], borderwidth=5)
        image_label.grid(row=2, column=3)

        if turns == 0:
            submission.grid_forget()
            image_label.grid_forget()
            image_label = Label(image=lose, borderwidth=5)
            image_label.grid(row=2, column=3)

            try_again = Button(button_frame ,text="Press to try again", padx=40, pady=5, command=start_over)
            try_again.grid(row=0, column=0)
            result2.delete('1.0',END)
            result2.insert(END,("The correct combination was " + str(answer)))   


# Restart the program
def start_over():
    os.execv(sys.executable, ['python'] + sys.argv)


# Initialize widgets

image_frame = LabelFrame(root, padx=5, pady=5)
image_frame.grid(row=2, column=3)

gameLabel = Label(root, text="Defuse the bomb!", padx=10, pady=5)
gameLabel.grid(row=0, column=2)

# Image widget
image_label = Label(image_frame, image=bomb9, bd=4)
image_label.grid(row=0, column=1, columnspan=2)

# Creating frames
num_frame = LabelFrame(root, padx=10, pady=5)
num_frame.grid(row=1, column=0, padx=20, pady=10)

cipher_frame = LabelFrame(root, padx=10, pady=5)
cipher_frame.grid(row=2, column=0, padx=20, pady=10)

rules_frame = LabelFrame(root, padx=10, pady=5)
rules_frame.grid(row=1, column=3, padx=20, pady=10)

results_frame = LabelFrame(root, padx=10, pady=5)
results_frame.grid(row=3, column=3, padx=20, pady=10, columnspan=2)

hints_frame = LabelFrame(root, padx=10, pady=5)
hints_frame.grid(row=2, column=2)

button_frame = LabelFrame(root, padx=10, pady=5)
button_frame.grid(row=3, column=0, padx=20, pady=10)

# Text widget - Rules

rulesLabel = Label(rules_frame, text="RULES").grid(row=0,column=0)
rules1Label = Label(rules_frame, text="1) Select a number unique to each Cipher box.").grid(sticky=W, row=1, column=0)
rules2label = Label(rules_frame, text="2) Select the Cipher key to input your guess.").grid(sticky=W, row=2, column=0)
rules3label = Label(rules_frame, text="3) You have 10 attempts before the bomb triggers.").grid(sticky=W, row=3,column=0)
rules4label = Label(rules_frame, text="4) Use the notes provided from your guesses to determine the solution.").grid(sticky=W, row=4,column=0)

# Number button widgets
num1 = Button(num_frame, text="1", padx=40, pady=15, borderwidth=3, command=lambda: button_click(1)).grid(row=0, column=0)
num2 = Button(num_frame, text="2", padx=40, pady=15, borderwidth=3, command=lambda: button_click(2)).grid(row=0, column=1)
num3 = Button(num_frame, text="3", padx=40, pady=15, borderwidth=3, command=lambda: button_click(3)).grid(row=0, column=2)
num4 = Button(num_frame, text="4", padx=40, pady=15, borderwidth=3, command=lambda: button_click(4)).grid(row=0, column=3)
num5 = Button(num_frame, text="5", padx=40, pady=15, borderwidth=3, command=lambda: button_click(5)).grid(row=0, column=4)
num6 = Button(num_frame, text="6", padx=40, pady=15, borderwidth=3, command=lambda: button_click(6)).grid(row=1, column=0)
num7 = Button(num_frame, text="7", padx=40, pady=15, borderwidth=3, command=lambda: button_click(7)).grid(row=1, column=1)
num8 = Button(num_frame, text="8", padx=40, pady=15, borderwidth=3, command=lambda: button_click(8)).grid(row=1, column=2)
num9 = Button(num_frame, text="9", padx=40, pady=15, borderwidth=3, command=lambda: button_click(9)).grid(row=1, column=3)
num0 = Button(num_frame, text="0", padx=40, pady=15, borderwidth=3, command=lambda: button_click(0)).grid(row=1, column=4)
e = Entry(num_frame, width=2, borderwidth=3, fg='black', bg='yellow')
e.grid(row=2, column=2, padx=5, pady=5)


# Cipher button widgets
cipher_box1 = Button(cipher_frame, text="CIPHER KEY 1", padx=10, pady=15, borderwidth=3, command=lambda: field_submit(num,1))
cipher_box1.grid(row=0,column=0)
cipher_box2 = Button(cipher_frame, text="CIPHER KEY 2", padx=10, pady=15, borderwidth=3, command=lambda: field_submit(num,2))
cipher_box2.grid(row=0,column=1)
cipher_box3 = Button(cipher_frame, text="CIPHER KEY 3", padx=10, pady=15, borderwidth=3, command=lambda: field_submit(num,3))
cipher_box3.grid(row=0,column=3)
cipher_box4 = Button(cipher_frame, text="CIPHER KEY 4", padx=10, pady=15, borderwidth=3, command=lambda: field_submit(num,4))
cipher_box4.grid(row=0,column=4)

c1 = Entry(cipher_frame, width=5, borderwidth=3)
c1.grid(row=1, column=0, padx=10)
c1.insert(0,0)
c2 = Entry(cipher_frame, width=5, borderwidth=3)
c2.grid(row=1, column=1, padx=10)
c2.insert(0,0)
c3 = Entry(cipher_frame, width=5, borderwidth=3)
c3.grid(row=1, column=3, padx=10)
c3.insert(0,0)
c4 = Entry(cipher_frame, width=5, borderwidth=3)
c4.grid(row=1, column=4, padx=10)
c4.insert(0,0)

cipher = Entry(cipher_frame, width=4, borderwidth=3, fg='white', bg='red')
cipher.grid(sticky='n', row=10, column=2)
cipher.insert(0, cipher1 + cipher2 + cipher3 + cipher4)

# Submit button widget
submission = Button(button_frame, text="Attempt to defuse the bomb", padx=10, pady=5, command=lambda: check_correct(answer))
submission.grid(row=0, column=0, columnspan=2, padx=10)

result1 = Label(results_frame, text="Results:")
result1.grid(row=4, column=0)
result2 = Text(results_frame, height=3, width=50, borderwidth=3)
result2.grid(row=5, column=0, columnspan=5)

hintslabel = Label(hints_frame, text="PREVIOUS NOTES").grid(row=1, column=0)
hints = Text(hints_frame, height= 10, width=10, borderwidth=3)
hints.grid(row=2, column=0, rowspan=1)

# Exit button widget
button_exit = Button(button_frame, text="Exit Program", padx=10, pady=5, command=root.quit)
button_exit.grid(row=1, column=0, padx=10, columnspan=2)

mainloop()
